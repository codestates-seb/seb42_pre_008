{
  "answer": [
    {
      "id": 1,
      "author": "kkte02",
      "update": "2023. 2. 27",
      "votes": 8,
      "content": "자바스크립트의 일반적인 함수는 자바스크립트 엔진의 콜스택에서 처리되지만, 타이머나 fetch같이 비동기적으로 처리되는 함수는 자바스크립트엔진이 아니라 실행환경인 브라우저나 node.js가 담당합니다. 만약에 setTimeout함수를 실행하면 해당 함수는 자바스크립트의 콜스택으로 들어가지만 setTimeout 내에 작성한 콜백함수는 수정",
      "adopt": false
    },
    {
      "id": 3,
      "author": "Eom0j",
      "update": "2023. 2. 22",
      "votes": 6,
      "content": "자바스크립트의 일반적인 함수는 자바스크립트 엔진의 콜스택에서 처리되지만, 타이머나 fetch같이 비동기적으로 처리되는 함수는 자바스크립트엔진이 아니라 실행환경인 브라우저나 node.js가 담당합니다. 만약에 setTimeout함수를 실행하면 해당 함수는 자바스크립트의 콜스택으로 들어가지만 setTimeout 내에 작성한 콜백함수는 브라우저의 태스크큐에 들어가서 콜스택이 빌 때까지 대기했다가 콜스택이 비면, 태스크 큐에 있던 함수가 콜스택에서 실행되게 됩니다. ",
      "adopt": false
    },
    {
      "id": 4,
      "author": "JudiPARK0416",
      "update": "2023. 2. 23",
      "votes": 4,
      "content": "자바스크립트의 일반적인 함수는 자바스크립트 엔진의 콜스택에서 처리되지만, 타이머나 fetch같이 비동기적으로 처리되는 함수는 자바스크립트엔진이 아니라 실행환경인 브라우저나 node.js가 담당합니다. 만약에 setTimeout함수를 실행하면 해당 함수는 자바스크립트의 콜스택으로 들어가지만 setTimeout 내에 작성한 콜백함수는 브라우저의 태스크큐에 들어가서 콜스택이 빌 때까지 대기했다가 콜스택이 비면, 태스크 큐에 있던 함수가 콜스택에서 실행되게 됩니다. ",
      "adopt": false
    },
    {
      "id": 99,
      "author": "kkte02",
      "update": "2023. 2. 27",
      "votes": 0,
      "content": "새로운데이터",
      "adopt": false
    }
  ]
}